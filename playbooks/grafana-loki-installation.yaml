---
- name: Deploy Grafana and Loki Logging Stack
  hosts: Arsenal
  vars:
    # Grafana vars
    grafana_user: "{{ GRAFANA_USER }}"
    grafana_password: "{{ GRAFANA_PASSWORD }}"
    grafana_port: "{{ GRAFANA_PORT }}"
    grafana_image: "{{ GRAFANA_IMAGE }}"
    grafana_container_name: "{{ GRAFANA_CONTAINER_NAME }}"

    # Loki vars
    loki_port: "{{ LOKI_PORT }}"
    loki_image: "{{ LOKI_IMAGE }}"
    loki_container_name: "{{ LOKI_CONTAINER_NAME }}"

  tasks:
    - name: Install python pip
      command: apt install -y python3-pip

    - name: Install setuptools
      command: pip3 install --break-system-packages setuptools
    # ============================================================
    # Grafana and Loki Installation
    # ============================================================
    - name: "[LOGGING] Ensure logging directories exist"
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /opt/logging
        - /opt/logging/loki/chunks
        - /opt/logging/loki/index
        - /opt/logging/loki/cache
        - /opt/logging/loki/wal
        - /opt/logging/loki/compactor
        - /opt/logging/provisioning/datasources

    - name: "[LOGGING] Create docker-compose.yml for Grafana+Loki"
      copy:
        dest: /opt/logging/docker-compose.yml
        content: |
          version: "3"
          services:
            loki:
              image: "{{ loki_image }}"
              container_name: "{{ loki_container_name }}"
              user: "0:0"
              ports:
                - "{{ loki_port }}:{{ loki_port }}"
              command: -config.file=/etc/loki/local-config.yaml -config.expand-env=true
              volumes:
                - /opt/logging/loki-config.yaml:/etc/loki/local-config.yaml
                - /opt/logging/loki/chunks:/loki/chunks
                - /opt/logging/loki/index:/loki/index
                - /opt/logging/loki/cache:/loki/cache
                - /opt/logging/loki/wal:/loki/wal
                - /opt/logging/loki/compactor:/loki/compactor

            grafana:
              image: "{{ grafana_image }}"
              container_name: "{{ grafana_container_name }}"
              ports:
                - "{{ grafana_port }}:{{ grafana_port }}"
              environment:
                GF_SECURITY_ADMIN_USER: "{{ grafana_user }}"
                GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_password }}"
              depends_on:
                - "{{ loki_container_name }}"
              volumes:
                - grafana-data:/var/lib/grafana
                - /opt/logging/provisioning:/etc/grafana/provisioning

          volumes:
            grafana-data:

    - name: "[LOGGING] Loki config file"
      copy:
        dest: /opt/logging/loki-config.yaml
        content: |
          auth_enabled: false

          server:
            http_listen_port: {{ loki_port | int }}

          ingester:
            lifecycler:
              ring:
                kvstore:
                  store: inmemory
                replication_factor: 1
            chunk_idle_period: 5m
            chunk_retain_period: 30s
            wal:
              enabled: true
              dir: /loki/wal
            max_transfer_retries: 0

          schema_config:
            configs:
              - from: 2020-10-24
                store: boltdb-shipper
                object_store: filesystem
                schema: v11
                index:
                  prefix: index_
                  period: 24h

          storage_config:
            boltdb_shipper:
              active_index_directory: /loki/index
              cache_location: /loki/cache
              shared_store: filesystem
            filesystem:
              directory: /loki/chunks

          compactor:
            working_directory: /loki/compactor
            shared_store: filesystem

          limits_config:
            enforce_metric_name: false
            reject_old_samples: true
            reject_old_samples_max_age: 168h

          chunk_store_config:
            max_look_back_period: 0s

          table_manager:
            retention_deletes_enabled: true
            retention_period: 7d

    - name: "[LOGGING] Add Loki datasource provisioning"
      copy:
        dest: /opt/logging/provisioning/datasources/loki.yaml
        content: |
          apiVersion: 1
          datasources:
            - name: Loki
              type: loki
              access: proxy
              url: http://{{ loki_container_name }}:{{ loki_port }}
              isDefault: true

    - name: "[LOGGING] Install Docker and docker-compose (if not present)"
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: "[LOGGING] Enable and start Docker service"
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: "[LOGGING] Create systemd service for Grafana+Loki stack"
      copy:
        dest: /etc/systemd/system/logging-stack.service
        mode: "0644"
        content: |
          [Unit]
          Description=Grafana + Loki Logging Stack
          Requires=docker.service
          After=docker.service

          [Service]
          Type=oneshot
          RemainAfterExit=true
          WorkingDirectory=/opt/logging
          ExecStart=/usr/bin/docker-compose -f /opt/logging/docker-compose.yml up -d
          ExecStop=/usr/bin/docker-compose -f /opt/logging/docker-compose.yml down
          TimeoutStartSec=0

          [Install]
          WantedBy=multi-user.target

    - name: "[LOGGING] Reload systemd daemon"
      systemd:
        daemon_reload: yes

    - name: "[LOGGING] Enable and start logging stack service"
      systemd:
        name: logging-stack.service
        enabled: true
        state: started

    - name: "[LOGGING] Wait for Grafana to be ready"
      uri:
        url: "http://localhost:{{ grafana_port }}/api/health"
        method: GET
        status_code: 200
        timeout: 5
      register: grafana_health
      retries: 30
      delay: 10
      until: grafana_health.status == 200
      ignore_errors: true

    - name: "[LOGGING] Deployment complete"
      debug:
        msg: |
          âœ… Grafana + Loki stack is running!
          - Grafana: http://<host>:{{ grafana_port }} (user: {{ grafana_user }})
          - Loki: http://<host>:{{ loki_port }}
          - Configs stored in /opt/logging
