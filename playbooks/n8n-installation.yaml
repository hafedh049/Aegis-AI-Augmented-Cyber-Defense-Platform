---
- name: Deploy n8n Automation Platform with Predefined Workflows
  hosts: Arsenal
  vars:
    n8n_dir: "{{ N8N_DIR }}"
    workflows_dir: "{{ WORKFLOWS_DIR }}"
    n8n_user: "{{ N8N_USER }}"
    n8n_pass: "{{ N8N_PASSWORD }}"
    n8n_host: "{{ N8N_HOST }}"
    n8n_port: "{{ N8N_PORT }}"
    n8n_container_name: "{{ N8N_CONTAINER_NAME }}"
    grok_api_key: "{{ GROK_API_KEY }}"
    slack_webhook: "{{ SLACK_WEBHOOK }}"
    discord_webhook: "{{ DISCORD_WEBHOOK }}"
    honeypot_ssh_password: "{{ HONEYPOT_SSH_PASSWORD | default('change_me') }}"
    caldera_ip: "{{ hostvars['Caldera']['ansible_default_ipv4']['address'] | default('127.0.0.1') }}"
    grafana_username: "{{ GRAFANA_USER }}"
    grafana_password: "{{ GRAFANA_PASSWORD }}"

  tasks:
    - name: "[N8N] Ensure required variables are defined"
      assert:
        that:
          - n8n_dir is defined
          - n8n_user is defined
          - n8n_pass is defined
          - n8n_host is defined
          - n8n_port is defined
          - grok_api_key is defined
          - slack_webhook is defined
          - discord_webhook is defined
          - grafana_username is defined
          - grafana_password is defined
        fail_msg: "Missing one or more required n8n variables."

    # ============================================================
    # n8n Installation and Workflow Setup
    # ============================================================
    - name: "[N8N] Ensure n8n directory exists"
      file:
        path: "{{ n8n_dir }}"
        state: directory
        mode: "0755"

    - name: "[N8N] Ensure workflows directory exists"
      file:
        path: "{{ workflows_dir }}"
        state: directory
        mode: "0755"

    - name: "[N8N] Create docker-compose.yml for n8n"
      copy:
        dest: "{{ n8n_dir }}/docker-compose.yml"
        content: |
          version: "3"
          services:
            n8n:
              image: n8nio/n8n:latest
              container_name: "{{ n8n_container_name }}"
              restart: always
              ports:
                - "{{ n8n_port }}:{{ n8n_port }}"
              environment:
                - N8N_BASIC_AUTH_ACTIVE=true
                - N8N_BASIC_AUTH_USER={{ n8n_user | regex_replace('^"|"$', '') }}
                - N8N_BASIC_AUTH_PASSWORD={{ n8n_pass | regex_replace('^"|"$', '') }}
                - N8N_SECURE_COOKIE=false
                - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
                - DB_SQLITE_POOL_SIZE=5
                - N8N_RUNNERS_ENABLED=true
                - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
              volumes:
                - n8n_data:/home/node/.n8n
                - {{ workflows_dir }}:/workflows

          volumes:
            n8n_data:

    - name: "[N8N] Install Docker and docker-compose (if not present)"
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: "[N8N] Enable and start Docker"
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: "[N8N] Start n8n"
      command: docker-compose -f "{{ n8n_dir }}/docker-compose.yml" up -d
      args:
        chdir: "{{ n8n_dir }}"

    - name: "[N8N] Wait for n8n HTTP to be ready"
      uri:
        url: "{{ n8n_host }}:{{ n8n_port }}"
        method: GET
        return_content: no
        status_code: 200
        timeout: 10
      register: n8n_response
      retries: 30
      delay: 10
      until: n8n_response.status == 200
      ignore_errors: true

    # -------------------------------
    # WORKFLOW DEFINITIONS (with inline quote cleaning)
    # -------------------------------

    - name: "[N8N] Copy RAG workflow JSON"
      copy:
        dest: "{{ workflows_dir }}/rag.json"
        content: |
          {
            "name": "RAG Workflow",
            "active": false,
            "nodes": [
              {
                "parameters": {},
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [250, 300]
              },
              {
                "parameters": {
                  "requestMethod": "POST",
                  "url": "https://api.grok.com/query",
                  "jsonParameters": true,
                  "bodyParametersJson": {
                    "query": "Hi"
                  },
                  "headersJson": {
                    "Authorization": "Bearer {{ grok_api_key | regex_replace('^\"|\"$', '') }}"
                  }
                },
                "name": "Call Grok API",
                "type": "n8n-nodes-base.httpRequest",
                "typeVersion": 2,
                "position": [450, 300]
              }
            ],
            "connections": {
              "Start": {
                "main": [
                  [
                    { "node": "Call Grok API", "type": "main", "index": 0 }
                  ]
                ]
              }
            }
          }

    - name: "[N8N] Copy Notification workflow JSON"
      copy:
        dest: "{{ workflows_dir }}/notification.json"
        content: |
          {
            "name": "Notification Workflow",
            "active": false,
            "nodes": [
              {
                "parameters": {},
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [250, 300]
              },
              {
                "parameters": {
                  "webhookUrl": "{{ slack_webhook | regex_replace('^\"|\"$', '') }}"
                },
                "name": "Slack Notification",
                "type": "n8n-nodes-base.slack",
                "typeVersion": 1,
                "position": [450, 300]
              },
              {
                "parameters": {
                  "webhookUrl": "{{ discord_webhook | regex_replace('^\"|\"$', '') }}",
                  "content": "Test Discord notification"
                },
                "name": "Discord Notification",
                "type": "n8n-nodes-base.discord",
                "typeVersion": 1,
                "position": [450, 500]
              }
            ],
            "connections": {
              "Start": {
                "main": [
                  [
                    { "node": "Slack Notification", "type": "main", "index": 0 },
                    { "node": "Discord Notification", "type": "main", "index": 0 }
                  ]
                ]
              }
            }
          }

    - name: "[N8N] Copy Block Caldera workflow JSON"
      copy:
        dest: "{{ workflows_dir }}/block-caldera.json"
        content: |
          {% raw %}
          {
            "name": "Block Caldera IP",
            "active": false,
            "nodes": [
              {
                "parameters": {},
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [250, 300]
              },
              {
                "parameters": {
                  "command": "sudo iptables -A INPUT -s {{$json[\"attacker_ip\"]}} -j DROP",
                  "host": "{{ caldera_ip | regex_replace('^\"|\"$', '')}}",
                  "username": "root",
                  "password": "{{ honeypot_ssh_password | regex_replace('^\"|\"$', '') }}"
                },
                "name": "Block IP on Honeypot",
                "type": "n8n-nodes-base.ssh",
                "typeVersion": 1,
                "position": [500, 300]
              }
            ],
            "connections": {
              "Start": {
                "main": [
                  [
                    { "node": "Block IP on Honeypot", "type": "main", "index": 0 }
                  ]
                ]
              }
            }
          }
          {% endraw %}

    - name: "[N8N] Copy Grafana Alerts workflow JSON"
      copy:
        dest: "{{ workflows_dir }}/grafana-alerts.json"
        content: |
          {
            "name": "Grafana + Loki Alerts",
            "active": false,
            "nodes": [
              {
                "parameters": {},
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [250, 300]
              },
              {
                "parameters": {
                  "authentication": "basicAuth",
                  "url": "http://grafana:3000/api/alerts",
                  "options": {
                    "sendBody": false
                  },
                  "auth": {
                    "user": "{{ grafana_username | regex_replace('^\"|\"$', '') }}",
                    "password": "{{ grafana_password | regex_replace('^\"|\"$', '') }}"
                  }
                },
                "name": "Fetch Grafana Alerts",
                "type": "n8n-nodes-base.httpRequest",
                "typeVersion": 2,
                "position": [500, 200]
              },
              {
                "parameters": {
                  "url": "http://loki:3100/loki/api/v1/query_range?query={job=\\\"honeypot\\\"}"
                },
                "name": "Fetch Loki Logs",
                "type": "n8n-nodes-base.httpRequest",
                "typeVersion": 2,
                "position": [500, 400]
              },
              {
                "parameters": {
                  "mode": "append"
                },
                "name": "Merge Alerts + Logs",
                "type": "n8n-nodes-base.merge",
                "typeVersion": 1,
                "position": [750, 300]
              }
            ],
            "connections": {
              "Start": {
                "main": [
                  [
                    { "node": "Fetch Grafana Alerts", "type": "main", "index": 0 },
                    { "node": "Fetch Loki Logs", "type": "main", "index": 0 }
                  ]
                ]
              },
              "Fetch Grafana Alerts": {
                "main": [
                  [
                    { "node": "Merge Alerts + Logs", "type": "main", "index": 0 }
                  ]
                ]
              },
              "Fetch Loki Logs": {
                "main": [
                  [
                    { "node": "Merge Alerts + Logs", "type": "main", "index": 1 }
                  ]
                ]
              }
            }
          }

    # -------------------------------
    # IMPORT WORKFLOWS INTO N8N
    # -------------------------------
    - name: "[N8N] Import Block Caldera workflow into n8n"
      command: docker exec {{ n8n_container_name }} n8n import:workflow --input="/workflows/block-caldera.json" --overwrite

    - name: "[N8N] Import Grafana Alerts workflow into n8n"
      command: docker exec {{ n8n_container_name }} n8n import:workflow --input="/workflows/grafana-alerts.json" --overwrite

    - name: "[N8N] Import RAG workflow into n8n"
      command: docker exec {{ n8n_container_name }} n8n import:workflow --input="/workflows/rag.json" --overwrite

    - name: "[N8N] Import Notification workflow into n8n"
      command: docker exec {{ n8n_container_name }} n8n import:workflow --input="/workflows/notification.json" --overwrite

    - name: "[N8N] Deployment complete"
      debug:
        msg: |
          ✅ n8n is running at {{ n8n_host }}:{{ n8n_port }}
          - Login: {{ n8n_user | regex_replace('^"|"$', '') }} / [REDACTED]
          - Workflows imported: RAG, Notification, Block Caldera, Grafana Alerts
          - Workflow files stored in: {{ workflows_dir }}
