---
- name: Deploy SonarQube (Docker-based) on Arsenal
  hosts: Arsenal
  vars:
    sonarqube_host: "{{ SONARQUBE_HOST }}"
    sonarqube_port: "{{ SONARQUBE_PORT }}"
    sonarqube_user: "{{ SONARQUBE_USER }}"
    sonarqube_password: "{{ SONARQUBE_PASSWORD }}"
    sonarqube_project: "{{ SONARQUBE_PROJECT }}"
    sonarqube_container_name: "{{ SONARQUBE_CONTAINER_NAME }}"
    sonarqube_image: "{{ SONARQUBE_IMAGE }}"

  tasks:
    # ============================================================
    # SonarQube Installation (Docker-based, auto-start)
    # ============================================================
    - name: "[SONARQUBE] Ensure SonarQube directories exist"
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /opt/sonarqube/data
        - /opt/sonarqube/extensions
        - /opt/sonarqube/logs

    - name: "[SONARQUBE] Fix permissions for SonarQube volumes (UID/GID 1000)"
      file:
        path: "{{ item }}"
        owner: 1000
        group: 1000
        recurse: yes
      loop:
        - /opt/sonarqube/data
        - /opt/sonarqube/extensions
        - /opt/sonarqube/logs

    - name: "[SONARQUBE] Install Docker and docker-compose (if not present)"
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: "[SONARQUBE] Enable and start Docker"
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: "[SONARQUBE] Pull SonarQube Docker image"
      docker_image:
        name: "{{ sonarqube_image }}"
        tag: community
        source: pull

    - name: "[SONARQUBE] Run SonarQube container"
      docker_container:
        name: "{{ sonarqube_container_name }}"
        image: "{{ sonarqube_image }}:community"
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "{{ sonarqube_port }}:{{ sonarqube_port }}"
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        volumes:
          - /opt/sonarqube/data:/opt/sonarqube/data
          - /opt/sonarqube/extensions:/opt/sonarqube/extensions
          - /opt/sonarqube/logs:/opt/sonarqube/logs

    - name: "[SONARQUBE] Wait for SonarQube HTTP to be ready"
      uri:
        url: "{{ sonarqube_host }}:{{ sonarqube_port }}"
        method: GET
        return_content: no
        status_code: 200
        timeout: 10
      register: sonarqube_response
      retries: 100
      delay: 10
      until: sonarqube_response.status == 200
      ignore_errors: true

    # ============================================================
    # Check if Project Exists
    # ============================================================
    - name: "[SONARQUBE] Check if project {{ sonarqube_project }} exists"
      uri:
        url: "{{ sonarqube_host }}:{{ sonarqube_port }}/api/projects/search?projects={{ sonarqube_project }}"
        method: GET
        user: "{{ sonarqube_user }}"
        password: "{{ sonarqube_password }}"
        force_basic_auth: yes
        status_code: 200
      register: project_check
      retries: 30
      delay: 10
      until: project_check.status == 200
      ignore_errors: true

    # ============================================================
    # Create Project If Not Exists
    # ============================================================
    - name: "[SONARQUBE] Create project {{ sonarqube_project }} if not exists"
      uri:
        url: "{{ sonarqube_host }}:{{ sonarqube_port }}/api/projects/create"
        method: POST
        user: "{{ sonarqube_user }}"
        password: "{{ sonarqube_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          name: "{{ sonarqube_project }}"
          project: "{{ sonarqube_project }}"
      when: project_check.json is defined and project_check.json.paging.total == 0

    # ============================================================
    # Check if Token File Already Exists
    # ============================================================
    - name: "[SONARQUBE] Check if token file exists"
      stat:
        path: "/root/{{ sonarqube_project | lower }}-token"
      register: token_file

    # ============================================================
    # Generate Token Only If No File Found
    # ============================================================
    - name: "[SONARQUBE] Generate new token if not exists"
      uri:
        url: "{{ sonarqube_host }}:{{ sonarqube_port }}/api/user_tokens/generate"
        method: POST
        user: "{{ sonarqube_user }}"
        password: "{{ sonarqube_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          name: "{{ sonarqube_project }}-Token"
      register: token_response
      when: not token_file.stat.exists

    # ============================================================
    # Save Token to File If Newly Created
    # ============================================================
    - name: "[SONARQUBE] Save token to file"
      copy:
        dest: "/root/{{ sonarqube_project | lower }}-token"
        mode: "0600"
        content: "{{ token_response.json.token }}"
      when: not token_file.stat.exists

    # ============================================================
    # Read Token From Existing File
    # ============================================================
    - name: "[SONARQUBE] Read existing token from file"
      slurp:
        path: "/root/{{ sonarqube_project | lower }}-token"
      register: existing_token
      when: token_file.stat.exists

    - name: "[SONARQUBE] Set final token fact"
      set_fact:
        sonar_token: >-
          {{ token_response.json.token if not token_file.stat.exists else (existing_token.content | b64decode) }}

    - name: "[SONARQUBE] Deployment complete"
      debug:
        msg: |
          âœ… SonarQube is running at {{ sonarqube_host }}:{{ sonarqube_port }}
          - Project: {{ sonarqube_project }}
          - Token file: /root/{{ sonarqube_project | lower }}-token
          - Use token for CI/CD analysis
